const { Telegraf, Markup } = require('telegraf')
require('dotenv').config();
const fs = require('fs')

const bot = new Telegraf(process.env.BOT_TOKEN)

bot.start((ctx) => {
    bot.telegram.sendMessage(ctx.chat.id,
        `–ü—Ä–∏–≤—ñ—Ç ${ctx.message.from.username} 
—Ü–µ–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç - —Ç–≤—ñ–π –Ñ–ì–ï–†–¨ 
–≤ –∫–∞–ª—å—è–Ω - –±–∞—Ä—ñ "Yellow Mellow"!üòä`, {
        reply_markup: {
            keyboard: [
                [
                    { text: '–ó–∞–º–æ–≤–∏—Ç–∏ —Å—Ç–æ–ª–∏–∫ ü™ë' }

                ],
                [
                    {
                        text: `–ö–∞–ª—å—è–Ω–Ω–∞ –∫–∞—Ä—Ç–∞
üòóüö¨üå¨` },
                    { text: `–ö–æ–∫—Ç–µ–π–ª—ñ üçπ` }

                ],
                [
                    { text: '–ü–∏–≤–æ üç∫üòµü•¥' },
                    { text: `C–µ—Ç–∏ üç∏üçªü•Çüç∑ü•É` },

                ],
                [
                    { text: 'Short Drinks üç∏' },
                    { text: `–ù–∞–ø–æ—ó üßã` },

                ],
                [
                    { text: '–ú–∏ –Ω–∞ Google Maps üó∫Ô∏è' }

                ]

            ],
            resize_keyboard: true,
        }
    })
    ctx.replyWithPhoto({ source: fs.createReadStream('img/main.jpg') })
})
bot.hears('–ó–∞–º–æ–≤–∏—Ç–∏ —Å—Ç–æ–ª–∏–∫ ü™ë', (ctx) => {
    ctx.replyWithHTML(`–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω—å:
    
üì± <b><code>+380637444337</code></b>
`);
})

bot.hears('–ú–∏ –Ω–∞ Google Maps üó∫Ô∏è', (ctx) => {
    bot.telegram.sendLocation(ctx.chat.id, latitude = '49.83870331057144', longitude = '24.027840313759', { proximity_alert_radius: 10 });
})

bot.hears(`–ö–∞–ª—å—è–Ω–Ω–∞ –∫–∞—Ä—Ç–∞
üòóüö¨üå¨`, (ctx) => {
    ctx.replyWithPhoto({ source: fs.createReadStream('img/hookah.jpg') })
    // ctx.reply('–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫–∞–ª—å—è–Ω—É', Markup.inlineKeyboard(
    //     [
    //         [Markup.button.callback('330 –≥—Ä–Ω –¢–ê–ù–ñ', '330')],
    //         [Markup.button.callback('270 –≥—Ä–Ω Darkside', '270')],
    //         [Markup.button.callback(`240 –≥—Ä–Ω –ì—É–∞–≤–Ω–æ–æ–æ`, '240')]
    //     ]
    // ))
})

bot.hears('–ü–∏–≤–æ üç∫üòµü•¥', (ctx) => {
    ctx.replyWithPhoto({ source: fs.createReadStream('img/beer.jpg') })
})
bot.hears('C–µ—Ç–∏ üç∏üçªü•Çüç∑ü•É', (ctx) => {
    ctx.replyWithPhoto({ source: fs.createReadStream('img/sets.jpg') })
})
bot.hears('Short Drinks üç∏', (ctx) => {
    ctx.replyWithPhoto({ source: fs.createReadStream('img/short.jpg') })
})
bot.hears('–ö–æ–∫—Ç–µ–π–ª—ñ üçπ', (ctx) => {
    ctx.replyWithPhoto({ source: fs.createReadStream('img/cocktails.jpg') })

    const secondPhoto = () => {
        return ctx.replyWithPhoto({ source: fs.createReadStream('img/cocktails2.jpg') })
    }

    setTimeout(secondPhoto, 1000);

})
bot.hears('–ù–∞–ø–æ—ó üßã', (ctx) => {
    ctx.replyWithPhoto({ source: fs.createReadStream('img/drinks.jpg') })
})
bot.hears('–ù–∞–ø–æ—ó üßã', (ctx) => {
    ctx.replyWithPhoto({ source: fs.createReadStream('img/drinks.jpg') })
})
// bot.command('stream', (ctx) => ctx.replyWithPhoto({ source: fs.createReadStream('/cats/cat2.jpeg') }))


// –∫–∞–ª—å—è–Ω

// bot.help((ctx) => ctx.reply('Send me a sticker'))
// bot.on('sticker', (ctx) => ctx.reply('üëç'))
// bot.hears('hi', (ctx) => ctx.reply('Hey there'))

bot.launch()

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))